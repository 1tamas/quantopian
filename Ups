setwd("D:\\ECMLupsell")
library(readr)
library(xgboost)
library(pROC)
users<-read_csv("users14_JOBB.csv")
users1<-read_csv("users14_JOBB1.csv") #'AMT','AMTb','NetFreq','PosFreq','PosSD','CLOSE'
# hold out for test
test1<-users1[users1$USER_ID>200000,]
users<-users[users$USER_ID<200001,]
users1<-users1[users1$USER_ID<200001,]

# train on BIG

#feature.names<-c('GEN','Age1','Age2','Age3','CAP','VIL','INC','WY','Have','Had','AMT','AMTb','NetFreq','PosFreq','PosSD','CARDS','CLOSE') 
feature.names<-c('GEN','Age1','Age2','Age3','CAP','VIL','INC','WY','JustHave','LongHave','AMT','AMTb','NetFreq','PosFreq','PosSD','CLOSE') 

train_eval<-users[,feature.names]
train_target<-setnames(data.frame(users[,c('Apply')]),'target')
################### train on H1   ################### 
train_eval<-users1[,feature.names]
train_target<-setnames(data.frame(users[,c('ApplyH2')]),'target')
#####################################################

#h <-sample(nrow(train_target),40000)    ################### 

dval   <-xgb.DMatrix(data=data.matrix(train_eval[h,]),label=train_target$target[h])
dtrain <-xgb.DMatrix(data=data.matrix(train_eval[-h,]),label=train_target$target[-h])
set.seed(3620)    ################### 
xgb_watchlist <-list(val=dval,train=dtrain) 
xgb_params <- list(  objective           = "binary:logistic",    # binary:logistic
                     booster = "gbtree",
                     eval_metric = "auc",
                     eta                 = 0.05,                          # 0.06 tan
                     max_depth           = 5,                             # try4
                     subsample           = 0.6,                           # from 0.55
                     colsample_bytree    = 0.6                            # 0.5
)
xgb_model <- xgb.train(
  params              = xgb_params, 
  data                = dtrain, 
  nrounds             = 134,
  verbose             = 1,  #0 if full training set and no watchlist provided
  watchlist           = xgb_watchlist,
  print.every.n       = 10,
  maximize            = FALSE
)
#modelcv = xgb.cv(params = xgb_params, nrounds = 350, nfold = 3, data = dtrain, early.stop.round = 20, print.every.n = 50 )
#IMP_all<-as.data.frame(xgb.importance(feature_names = feature.names, model = xgb_model))

# Predict on 1
test1_features<-test1[h,feature.names]
test1_target<-setnames(data.frame(test1[,c('ApplyH2')]),'target')
#test1_features$
predictions <- predict(xgb_model, data.matrix(test1_features))
auc(test1_target$target,predictions)  #
cor(test1_target$target,pred)         #0.5760506

cor(users$ApplyH2,predictions)

# watch cluster stats
DF$PRED<-predictions
colnames(DF)[222]<-'PRED'
mean(DF$PRED)


